#!/usr/bin/env ruby

if ARGV.delete("-h") or ARGV.delete("--help")
  puts <<-END
    Usage:
      #$0

      #$0 services_file
      #$0 services_file <script...

      #$0 services_file unix [path]
      #$0 services_file tcp [host [port]]]
    
    The first form starts a tuplespace service as a child process. Then it
    enters an interactive session in which the current object is the proxy to
    that tuplespace. This form is useful for an isolated tuplespace for
    simple experiments.
    
    The second form tries to open the services_file. If it cannot, then as in
    the first form, it starts a tuplespace service child process and writes its
    address to services_file. If it can open the services_file, then it simply
    connects to the referenced tuplespace service. In either case, as in the
    first form, an interactive session starts. This form (in its two variants)
    is useful for starting two sessions operating on the same tuplespace.

    The third form is like the second form, but executes the input instead of
    starting an interactive session. Output is like irb output, with input lines
    alternating with their output. This is useful for generating human-readable
    transcripts.

    The fourth and fifth forms are like the previous, but can be used to expose
    the service on more or less public sockets with specified addresses. In the
    tcp case, the services_file can be copied to other hosts and used with tup
    to connect to the services (adjust the host references as needed). The
    default for unix is, as in the first three forms, a path in a tmpdir. The
    default for tcp is localhost with port 0, and hence a dynamically chosen
    port. These forms are only for starting a new service; connecting to an
    existing service uses the simpler form "#$0 services_file".

    Options:
    
      --debug     set the log level
      --info
      --warn      <-- default
      --error
      --fatal
      
      -v          verbose mode (include time and pid in log messages)
      
      --trace     enable trace output

      --tunnel    remote clients use ssh tunnels by default
      
      --pubsub    publish/subscribe mode; does not keep local tuple store:
      
                    * read only works in blocking mode (waiting for new tuple)
                    * write and pulse work normally
                    * take does not work

      --marshal   use specified library to serialize objects
      --yaml
      --json
      --msgpack   <-- default

      --symbol-keys
      --string-keys
                  for json and msgpack, represent hash keys as symbols
                  or strings (see doc/faq for more details)
      
      --persist-dir DIR
                  load and save tuplestore to DIR
                    (only needs to be set on first tup invocation)

      --subscribe TAG,TAG,...
                  subscribe to specified subspaces; use "" for none
                  by default, tup client subscribes to everything

  END
  exit
end

require 'tupelo/app'

argv, tupelo_opts = Tupelo.parse_args(ARGV)

# non-standard tupelo opts:
pubsub = argv.delete("--pubsub")
symbol_keys = argv.delete("--symbol-keys")
string_keys = argv.delete("--string-keys")

if i=argv.index("--subscribe") # default is to subscribe to all
  argv.delete("--subscribe")
  subscribed_tags = argv.delete_at(i).split(",")
end

services_file = argv.shift
proto = (argv.shift || :unix).to_sym
addr = {proto: proto}
case proto
when :unix
  addr[:path] = argv.shift
when :tcp
  addr[:bind_host] = argv.shift
  addr[:port] = argv.shift
  addr[:port] = Integer(addr[:port]) if addr[:port]
end

Tupelo.application(
  argv: argv,
  **tupelo_opts,
  services_file: services_file,
  seqd_addr: addr,
  cseqd_addr: addr, # using same addr causes autoincrement of port/filename
  arcd_addr: addr) do

  class TupClient < Tupelo::Client
    alias w write_wait
    alias pl pulse_wait
    alias t take
    alias r read_wait
    alias ra read_all
    alias tr transaction
    CMD_ALIASES = %w{ w pl t r ra tr }
    private *CMD_ALIASES

    def trace *args
      require 'tupelo/app/trace'
      if args.empty?
        if tracing? then stop_trace else start_trace end
      elsif args.first
        start_trace
      else
        stop_trace
      end
      tracing?
    end

    def help
      puts "Command aliases:"
      CMD_ALIASES.each do |m_name|
        m = method(m_name)
        printf "%8s -> %s\n", m.name, m.original_name
      end
      puts
      puts "Extra commands:"
      puts "  trace [true|false]  # turn on or off tracing"
      puts "  trace               # toggle tracing"
      nil
    end
  end

  client_opts = {}

  if string_keys
    client_opts[:symbolize_keys] = false
  end

  if symbol_keys
    client_opts[:symbolize_keys] = true
  end

  if pubsub
    client_opts[:arc] = nil
    client_opts[:tuplestore] = TupClient::NullTupleStore
  end
  
  if subscribed_tags
    client_opts[:subscribe] = subscribed_tags
  end

  local TupClient, **client_opts do
    log.info {"cpu time: %.2fs" % Process.times.inject {|s,x|s+x}}
    log.info {"starting shell."}

    require 'tupelo/app/irb-shell'
    IRB.start_session(self)
  end
end
